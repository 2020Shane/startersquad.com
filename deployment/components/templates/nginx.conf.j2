server {
  listen 443 ssl;
  server_name www.{{app_domain}};

  ssl_certificate {{ssl_install_path}}/{{ssl_cert_name}}.crt;
  ssl_certificate_key {{ssl_install_path}}/{{ssl_key_name}}.key;

  root {{install_dir}}/_site;

  error_page 404 /404.html;

  expires 1d;

  # Protect against the BEAST attack by preferring RC4-SHA when using SSLv3 and TLS protocols.
  # Note that TLSv1.1 and TLSv1.2 are immune to the beast attack but only work with OpenSSL v1.0.1 and higher and has limited client support.
  ssl_protocols              SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers  on;

  # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
  # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
  # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
  # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
  ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
  ssl_session_timeout  10m;
}

# Forced usage of https
server {
  listen 80;
  server_name www.{{app_domain}};
  return 301 https://www.{{app_domain}}$request_uri;
}

# Naked domain redirect
server {
  listen 80;
  listen 443 ssl;
  server_name {{app_domain}};
  return 301 https://www.{{app_domain}}$request_uri;
}
